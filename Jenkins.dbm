pipeline {
    agent {
        docker {
            image 'image-folder/my-docker-image'
             args '-u root -v $WORKSPACE/node_modules -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    stages {
          stage('execute db-migration') {
                  when {
                anyOf { 
                    branch "release/*" 
                  }
                }
                  steps {
                    withCredentials([string(credentialsId: $MONGODB_URI_ENV, variable: 'MONGODB_URI')]) {  
                        sh '''
                          echo $MONGODB_URI
                        '''
                    }
                  }     
                post {
                  failure{
                    setFailureReason("failed prepare build info")
                  }
                }    
            }
          }
    }
    post {
        always {
            script {
                if(currentBuild.result == 'SUCCESS') {
                    slackSend(color: '#00FF00', message: "Changed from FAILURE to SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER}:\n${env.BUILD_URL} ")
                }
                if(currentBuild.result == 'FAILURE') {
                slackSend(color: '#FF0000', message: "SUCCESS to FAILURE: ${env.JOB_NAME} #${env.BUILD_NUMBER}:\n${env.BUILD_URL} in Stage $env.FAILURE_STAGE ")
                }
            }
            sh'''
                echo "yarn run stop-mongod"
            '''
        }
    }
}