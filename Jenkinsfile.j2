env.ENV_BUILDNAME="DEV"
env.dpeClFoTag="Development"
env.dpeClFoBuildDate="TimeStamp"
env.DPE_DEPLOY_KEY
env.JENKINS_HOME
def buildDisplayName
def now = new Date() 
env.FAILURE_STAGE="Declarative: Checkout SCM"
def author
def setFailureReason(reason)
{
      env.FAILURE_STAGE=reason
}

pipeline {
    agent {
        docker {
            image 'image-folder/my-docker-image'
             args '-u root -v $WORKSPACE/node_modules -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    environment {
       dev = 'true'
    }
    stages {
          stage('Prepare Branch Build Info') {
              steps {
                script{       
                    buildDisplayName = "${BRANCH_NAME}:${BUILD_NUMBER}"
                }
              }   
          }      
          stage('Prepare Build Info') {
                  when {
                        anyOf {
                          branch '';
                          branch 'master';
                          branch 'development';
                          branch 'PR-*'
                        }
                    }
                  steps {
                    script {
                      buildDisplayName = "${now.format("yyyyMMdd", TimeZone.getTimeZone('America/New_York'))}:${BUILD_NUMBER}"
                    }
                    sh '''
                      echo yarn run mongod-start
                      author = "$(curl ${BUILD_URL}api/json | jq '.fullName')"
                      '''
                  }     
                post {
                  failure{
                    setFailureReason("failed prepare build info")
                  }
                }    
            }

          stage('build app') {
            steps {
                        script{
                            currentBuild.displayName = buildDisplayName
                            env.ENV_BUILDNAME=buildDisplayName
                            env.dpeClFoTag=sh script: "echo \$(git describe ) | tr -d '\n'", returnStdout: true
                            env.dpeClFoBuildDate=sh script: "echo \$(TZ='EST5EDT,M3.2.0,M11.1.0' date) | tr -d '\n'", returnStdout: true
                            env.JENKINS_HOME=sh script: "echo \$(dirname \$(dirname \$(pwd))) | tr -d '\n'", returnStdout: true
                        }              
                      sh '''
                        author=echo "$(curl -s --insecure ${BUILD_URL}api/json | jq '.authorEmail')"
                        echo $author
                        echo "yarn run compile"
                      '''  
                }     
              post {
                failure{
                  script {
                    setFailureReason('build app')
                  }                  
                }
              }    
          }

          stage('unit test') {
            steps {
                      sh '''
                        echo "yarn run test"
                        exit 1
                      '''
                }     
              post {
                failure{
                  script {
                    setFailureReason('Unit test app')
                  }                  
                }
              }    
          }


          stage('Deploy Some Client Foundation') {
              steps{
                withCredentials([string(credentialsId: 'MyDeployKey', variable: 'MYDEPLOYKEY')]) {
                    sh '''
                        echo $(dirname ~/)
                        set -x
                       if [ $dpeBuildJson != $ENV_BUILDNAME ];
                        then
                            echo "should have failed"
                            exit 1
                        fi
                            exit 0
                    '''
                }  
              }
              post {
                failure {
                  script {
                    setFailureReason('Deploy some client')
                  }
                }
              }              
          }      
    }
      post {
          always {
              sh'''
                 echo "yarn run stop-mongod"
                 echo "author is $author
              '''
          }
       }
}