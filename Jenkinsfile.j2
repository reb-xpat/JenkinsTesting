env.ENV_BUILDNAME="DEV"
env.dpeClFoTag="Development"
env.dpeClFoBuildDate="TimeStamp"
env.DPE_DEPLOY_KEY
def errorMsg
def rawLog

pipeline {
    agent {
        docker {
            image 'envolve-innovation-labs/eil-cibuild-nodejs:sre-1.0.9-2019.07.23'
             args '-u root -v $WORKSPACE/node_modules -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    environment {
       dev = 'true'
    }
    stages {
          stage('Prepare Build Info') {
                  steps {
                     //slackSend(color: '#FFFF00', , message: "Started: `${env.JOB_NAME}` #${env.BUILD_NUMBER}:\n${env.BUILD_URL}")
                        script{
                            def now = new Date()
                            def buildDisplayName = "${now.format("yyyyMMdd", TimeZone.getTimeZone('America/New_York'))}:${BUILD_NUMBER}"
                            currentBuild.displayName = buildDisplayName
                            env.ENV_BUILDNAME=buildDisplayName
                            env.dpeClFoTag=sh script: "echo \$(git describe ) | tr -d '\n'", returnStdout: true
                            env.dpeClFoBuildDate=sh script: "echo \$(TZ='EST5EDT,M3.2.0,M11.1.0' date) | tr -d '\n'", returnStdout: true
                          echo "[16:26:24] Starting 'compile'... [16:26:24] Finished 'compile' after 167 ms" 
                          echo "lerna ERR! compile Errored while running script in 'dpe-client-interceptor'"
                          echo "lerna ERR! execute callback with error" 
                          echo "lerna ERR! Error: Command failed: yarn run compile" 
                          echo "lerna ERR! (!) You have passed an unrecognized option" 
                          echo "lerna ERR! Unknown CLI flag: target. Allowed options: acorn, acornInjectPlugins, amd, assetFileNames, banner, c, cache, chunkFileNames, chunkGroupingSize, compact, config, context, d, dir, dynamicImportFunction, e, entryFileNames, environment, esModule, experimentalCacheExpiry, experimentalOptimizeChunks, experimentalTopLevelAwait, exports, extend, external, f, file, footer, format, freeze, g, globals, h, i, indent, inlineDynamicImports, input, interop, intro, m, manualChunks, moduleContext, n, name, namespaceToStringTag, noConflict, o, onwarn, outro, paths, perf, plugins, preferConst, preserveModules, preserveSymlinks, shimMissingExports, silent, sourcemap, sourcemapExcludeSources, sourcemapFile, strict, treeshake, v, w, watch lerna ERR! lerna ERR! src/index.js -> dist/ambetter/assets/module, dist/ambetter/assets/system..."
                          echo "lerna ERR! (!) 'this has been rewritten to 'undefined'" 
                          echo "lerna ERR! https://rollupjs.org/guide/en#error-this-is-undefined" 
                          echo "lerna ERR! ../dpe-client-core/lib/hooks/useAdobeAnalytics.js" 
                          echo "lerna ERR! 10: import 'core-js/modules/es6.array.is-array';" 
                          echo "lerna ERR! 11:" 
                          echo "lerna ERR! 12: var _this = this;"
                          echo "lerna ERR!                 ^ " 
                          echo "lerna ERR! 13:  lerna ERR! 14: function _slicedToArray(arr, i)" 
                          echo "lerna ERR! (!) Circular dependency: ../dpe-client-foundation/lib/index.js -> ../dpe-client-foundation/lib/elements/Tabs/index.js -> ../dpe-client-foundation/lib/index.jslerna ERR! (!) Circular dependency: ../dpe-client-foundation/lib/index.js -> ../dpe-client-foundation/lib/composites/Popup/index.js -> ../dpe-client-foundation/lib/index.js"  
                          echo "lerna ERR! (!) Circular dependency: ../dpe-client-foundation/lib/index.js -> ../dpe-client-foundation/lib/components/Alert/index.js -> ../dpe-client-foundation/lib/index.js"
                          echo "2: import 'core-js/modules/es6.promise';" echo 
                          echo "3: import 'core-js/modules/es6.object.to-string';" 
                          echo "4: import 'core-js/modules/es6.function.name';"    
                          echo "^ 5: import 'core-js/modules/es6.regexp.replace';" 
                          echo "Error: 'isMemberEnrolled' is not exported by ../eil-common/lib/index.client.js"     
                          echo "at error (/mnt/mesos/sandbox/jenkins/workspace/nvolveinnovationlab_PR-1604-ACXS4AWC5VZQEQSKKR3E4B5VTI7AVIHTJNPPXZBK2RS7NPROG3ZQ/node_modules/rollup/dist/rollup.js:9365:30)     at Module.error (/mnt/mesos/sandbox/jenkins/workspace/nvolveinnovationlab_PR-1604-ACXS4AWC5VZQEQSKKR3E4B5VTI7AVIHTJNPPXZBK2RS7NPROG3ZQ/node_modules/rollup/dist/rollup.js:13272:9)     at handleMissingExport (/mnt/mesos/sandbox/jenkins/workspace/nvolveinnovationlab_PR-1604-ACXS4AWC5VZQEQSKKR3E4B5VTI7AVIHTJNPPXZBK2RS7NPROG3ZQ/node_modules/rollup/dist/rollup.js:13194:21)     at Module.traceVariable (/mnt/mesos/sandbox/jenkins/workspace/nvolveinnovationlab_PR-1604-ACXS4AWC5VZQEQSKKR3E4B5VTI7AVIHTJNPPXZBK2RS7NPROG3ZQ/node_modules/rollup/dist/rollup.js:13586:17)"     
                          echo "at ModuleScope.findVariable (/mnt/mesos/sandbox/jenkins/workspace/nvolveinnovationlab_PR-1604-ACXS4AWC5VZQEQSKKR3E4B5VTI7AVIHTJNPPXZBK2RS7NPROG3ZQ/node_modules/rollup/dist/rollup.js:12293:39) at FunctionScope.findVariable (/mnt/mesos/sandbox/jenkins/workspace/nvolveinnovationlab_PR-1604-ACXS4AWC5VZQEQSKKR3E4B5VTI7AVIHTJNPPXZBK2RS7NPROG3ZQ/node_modules/rollup/dist/rollup.js:2961:38) at ChildScope.findVariable (/mnt/mesos/sandbox/jenkins/workspace/nvolveinnovationlab_PR-1604-ACXS4AWC5VZQEQSKKR3E4B5VTI7AVIHTJNPPXZBK2RS7NPROG3ZQ/node_modules/rollup/di"
                        }
                        sh '''
                          echo $PWD
                          echo $WORKSPACE
                          exit 1
                        '''
                post {
                  failure{
                        script {
                          env.FAILURE_STAGE = 'Build Info'
                          rawLog = currentBuild.rawBuild.getLog(30)
                          echo rawLog
                          errorMsg = rawLog =~ /lerna ERR! /
                        }
                        sh'''
                          echo yarn run mongod-stop
                          pwd
                        '''
                  }
                } 
              }   
            }

          stage('Deploy Some Client Foundation') {
              steps{
                withCredentials([string(credentialsId: 'DPEDeployKey', variable: 'DEPLOYKEY')]) {
                    sh '''
                        echo $(dirname ~/)
                        set -x
                        echo "start deploy dpe-client-foundation"
                        cp docker/dpe-script-environment/.aws.credentials.enc ~/
                        dpeBuildTag=$ENV_BUILDNAME

                        echo "'{"buildNumber": "$dpeBuildTag", "tag": "$dpeClFoTag", "buildDate": "$dpeClFoBuildDate" }'"
                        echo "{ \\\"buildNumber\\\": \\\"$dpeBuildTag\\\", \\\"buildDate\\\": \\\"$dpeClFoBuildDate\\\" }" > some-client-text.json
                        echo "deploy key: $DEPLOYKEY"
                        bin/deploy-dpe.sh -p $DEPLOYKEY -j
                        dpeBuildJson="$(curl -s http://d2zn28muh0qa4g.cloudfront.net/STORYBOOK/build-date.json | jq '.buildNumber' | tr -d '"')"
                         if [ $dpeBuildJson != $ENV_BUILDNAME ];
                    then
                        echo "should have failed"
                        exit 0
                    fi
                        exit 0
                    '''
                }  
              }
              post {
                failure {
                  script {
                    env.FAILURE_STAGE = 'Deploy some client'
                    errorMsg = currentBuild.rawBuild.getLog(10)
                  }
                }
              }              
          }      
    }
      post {
          always {
              script {
                  if(currentBuild.result == 'SUCCESS') {
                      slackSend(color: '#00FF00', message: "Changed from FAILURE to SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER}:\n${env.BUILD_URL} ")
                  }
                  if(currentBuild.result == 'FAILURE') {
                    slackSend(color: '#FF0000', message: "SUCCESS to FAILURE: ${env.JOB_NAME} #${env.BUILD_NUMBER}:\n${env.BUILD_URL} in Stage $env.FAILURE_STAGE Error: $errorMsg ")
                  }
              }
          }
       }
}