env.ENV_BUILDNAME="DEV"
env.dpeClFoTag="Development"
env.dpeClFoBuildDate="TimeStamp"
env.DPE_DEPLOY_KEY
env.JENKINS_HOME
def errorMsg
def rawLog="[16:26:24] Starting 'compile'... [16:26:24] Finished 'compile' after 167 ms\n lerna ERR! compile Errored while running script in 'dpe-client-interceptor'\n lerna ERR! execute callback with error\n lerna ERR! Error: Command failed: yarn run compile\n lerna ERR! (!) You have passed an unrecognized option\n lerna ERR! Unknown CLI flag: target. Allowed options: acorn, acornInjectPlugins, amd, assetFileNames, banner, c, cache, chunkFileNames, chunkGroupingSize, compact, config, context, d, dir, dynamicImportFunction, e, entryFileNames, environment, esModule, experimentalCacheExpiry, experimentalOptimizeChunks, experimentalTopLevelAwait, exports, extend, external, f, file, footer, format, freeze, g, globals, h, i, indent, inlineDynamicImports, input, interop, intro, m, manualChunks, moduleContext, n, name, namespaceToStringTag, noConflict, o, onwarn, outro, paths, perf, plugins, preferConst, preserveModules, preserveSymlinks, shimMissingExports, silent, sourcemap, sourcemapExcludeSources, sourcemapFile, strict, treeshake, v, w, watch\n lerna ERR!\n lerna ERR! src/index.js -> dist/ambetter/assets/module, dist/ambetter/assets/system...\n lerna ERR! (!) 'this' has been rewritten to 'undefined'\n lerna ERR! https://rollupjs.org/guide/en#error-this-is-undefined lerna ERR! ../dpe-client-core/lib/hooks/useAdobeAnalytics.js\n lerna ERR! 10: import 'core-js/modules/es6.array.is-array'; lerna ERR! 11:\n lerna ERR! Error 12: var _this = this; lerna ERR!                 ^\n  lerna ERR! 13:\n  lerna ERR! 14: function _slicedToArray(arr, i)"
def buildDisplayName
def now = new Date() 

pipeline {
    agent {
        docker {
            image 'envolve-innovation-labs/eil-cibuild-nodejs:sre-1.0.9-2019.07.23'
             args '-u root -v $WORKSPACE/node_modules -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    environment {
       dev = 'true'
    }
    stages {
          stage('Prepare Build Info') {
                  when {
                        anyOf {
                          branch '';
                          branch 'master';
                          branch 'development';
                          branch 'PR-*'
                        }
                    }
                  steps {
                    script {
                      buildDisplayName = "${now.format("yyyyMMdd", TimeZone.getTimeZone('America/New_York'))}:${BUILD_NUMBER}"
                    }
                  }     
                post {
                  failure{
                    sh'''
                      echo yarn run mongod-stop
                    '''
                  }
                }    
            }

          stage('Prepare Branch Build Info') {
              when { 
                anyOf { 
                    branch "release/*" 
                  }
              }
              steps {
                script{       
                    buildDisplayName = "${BRANCH_NAME}:${BUILD_NUMBER}"
                }
              }
          }
          stage('build app') {
            steps {
                        script{
                            currentBuild.displayName = buildDisplayName
                            env.ENV_BUILDNAME=buildDisplayName
                            env.dpeClFoTag=sh script: "echo \$(git describe ) | tr -d '\n'", returnStdout: true
                            env.dpeClFoBuildDate=sh script: "echo \$(TZ='EST5EDT,M3.2.0,M11.1.0' date) | tr -d '\n'", returnStdout: true
                            env.JENKINS_HOME=sh script: "echo \$(dirname \$(dirname \$(pwd))) | tr -d '\n'", returnStdout: true
                        }              
                      sh '''
                        echo "yarn run start-mongod
                        echo ${BRANCH_NAME}
                        echo "######## ${JENKINS_HOME}/$JOB_NAME/$BUILD_NUMBER ########"
                        echo $WORKSPACE
                        exit 0
                      '''
                }     
              post {
                failure{
                  sh'''
                    echo yarn run stop-mongod
                    echo "cat logfile in ${JENKINS_HOME}"
                    cat "${JENKINS_HOME}/jobs/${JOB_NAME}/builds/${BUILD_NUMBER}/log"
                    echo "done with cat"
                  '''
                }
              }    
          }

          stage('Deploy Some Client Foundation') {
              steps{
                withCredentials([string(credentialsId: 'DPEDeployKey', variable: 'DEPLOYKEY')]) {
                    sh '''
                        echo $(dirname ~/)
                        set -x
                        echo "start deploy dpe-client-foundation"
                        cp docker/dpe-script-environment/.aws.credentials.enc ~/
                        dpeBuildTag=$ENV_BUILDNAME

                        echo "'{"buildNumber": "$dpeBuildTag", "tag": "$dpeClFoTag", "buildDate": "$dpeClFoBuildDate" }'"
                        echo "{ \\\"buildNumber\\\": \\\"$dpeBuildTag\\\", \\\"buildDate\\\": \\\"$dpeClFoBuildDate\\\" }" > some-client-text.json
                        echo "deploy key: $DEPLOYKEY"
                        bin/deploy-dpe.sh -p $DEPLOYKEY -j
                        dpeBuildJson="$(curl -s http://d2zn28muh0qa4g.cloudfront.net/STORYBOOK/build-date.json | jq '.buildNumber' | tr -d '"')"
                         if [ $dpeBuildJson != $ENV_BUILDNAME ];
                    then
                        echo "should have failed"
                        exit 0
                    fi
                        exit 0
                    '''
                }  
              }
              post {
                failure {
                  script {
                    env.FAILURE_STAGE = 'Deploy some client'
                    errorMsg = currentBuild.rawBuild.getLog(30)
                  }
                }
              }              
          }      
    }
      post {
          always {
              script {
                  if(currentBuild.result == 'SUCCESS') {
//                      slackSend(color: '#00FF00', message: "Changed from FAILURE to SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER}:\n${env.BUILD_URL} ")
                  }
                  if(currentBuild.result == 'FAILURE') {
//                    slackSend(color: '#FF0000', message: "SUCCESS to FAILURE: ${env.JOB_NAME} #${env.BUILD_NUMBER}:\n${env.BUILD_URL} in Stage $env.FAILURE_STAGE Error: $errorMsg ")
                  }
              }
          }
       }
}