env.ENV_BUILDNAME="DEV"
env.dpeClFoTag="Development"
env.dpeClFoBuildDate="TimeStamp"
env.DPE_DEPLOY_KEY
env.JENKINS_HOME
def buildDisplayName
def now = new Date() 
env.FAILURE_STAGE=""
def author="me"

def shouldSendSlack(branchName)
{
  return (branchName.contains("release") || branchName.contains("development") || branchName.contains("master"))
}

def setFailureReason(reason, branchName)
{
   if (shouldSendSlack(branchName)){  
      env.FAILURE_STAGE=reason
      echo "Failure stage" + env.FAILURE_STAGE
   }
}

pipeline {
    agent {
        docker {
            image 'image-folder/my-docker-image'
            args '-u root -v $WORKSPACE/node_modules'
        }
    }
    environment {
       dev = 'true'
    }
    stages {
          stage('Prepare Build Info') {
              steps {
                script{  
                  if (env.BRANCH_NAME.contains("release"))  {
                    buildDisplayName = env.BRANCH_NAME+":${BUILD_NUMBER}"
                  } 
                  else {
                    buildDisplayName = "${now.format("yyyyMMdd", TimeZone.getTimeZone('America/New_York'))}:${BUILD_NUMBER}"
                  }
                  echo "build display name: " + buildDisplayName
                }
              }
              post {
                failure{
                  script {
                    setFailureReason('Prepare Build Info', env.BRANCH_NAME)
                  }                  
                }
              }    
          }      
              stage('build app') {
                steps {
                            script{
                               echo "branch name -> " + env.BRANCH_NAME
                                currentBuild.displayName = buildDisplayName
                                env.ENV_BUILDNAME=buildDisplayName
                                env.dpeClFoTag=sh script: "echo \$(git describe ) | tr -d '\n'", returnStdout: true
                                env.dpeClFoBuildDate=sh script: "echo \$(TZ='EST5EDT,M3.2.0,M11.1.0' date) | tr -d '\n'", returnStdout: true
                                env.JENKINS_HOME=sh script: "echo \$(dirname \$(dirname \$(pwd))) | tr -d '\n'", returnStdout: true
                            }              
                          sh '''
                            author=$(curl -s --insecure ${BUILD_URL}api/json | jq '.authorEmail')
                            echo $author
                            echo "yarn run compile"
                          '''  
                    }     
                  post {
                    failure{
                      script {
                        setFailureReason('build app', env.BRANCH_NAME)
                      }                  
                    }
                  }    
              }

              stage('unit test') {
                steps {
                     sh '''
                        mongod &
                        sleep 2
                     '''
                    }     
                  post {
                    failure{
                      script {
                        setFailureReason('Unit test app', env.BRANCH_NAME)
                      }                  
                    }
                  }    
              }

          stage('Deploy Some Client Foundation') {
              when {
                expression {
                   script {
                      if(env.BRANCH_NAME != null) {
                        true
                      }
                    }
                }
              }
              steps{
                withCredentials([string(credentialsId: 'MyDeployKey', variable: 'MYDEPLOYKEY')]) {
                    sh '''
                        echo $(dirname ~/)
                        set -x
                       if [ $dpeBuildJson != $ENV_BUILDNAME ];
                        then
                            echo "should have failed"
                            exit 0
                        fi
                            exit 0
                    '''
                }  
              }
              post {
                failure {
                  script {
                    if($BRANCH_NAME.startsWith("PR-")){
                      echo "this is a pr branch and won\'t log to slack"
                    }
                    setFailureReason('Deploy some client', env.BRANCH_NAME)
                  }
                }
              }              
          }      
    }
      post {
          always {
              sh'''
                 mongod --shutdown
                 echo "author is $author"
                 echo "Failure stage" + $FAILURE_STAGE
              '''
          }
       }
}