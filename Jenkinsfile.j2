env.ENV_BUILDNAME="DEV"
env.dpeClFoTag="Development"
env.dpeClFoBuildDate="TimeStamp"
env.DPE_DEPLOY_KEY
pipeline {
    agent {
        docker {
            image 'envolve-innovation-labs/eil-cibuild-nodejs:sre-1.0.9-2019.07.23'
            args '-u root  -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    environment {
        dev = 'true'
    }
    stages {
          stage('Prepare Build Info') {
                  steps {
                     //slackSend(color: '#FFFF00', , message: "Started: `${env.JOB_NAME}` #${env.BUILD_NUMBER}:\n${env.BUILD_URL}")
                        script{
                            def now = new Date()
                            def buildDisplayName = "${now.format("yyyyMMdd", TimeZone.getTimeZone('America/New_York'))}:${BUILD_NUMBER}"
                            currentBuild.displayName = buildDisplayName
                            env.ENV_BUILDNAME=buildDisplayName
                            env.dpeClFoTag=sh script: "echo \$(git describe ) | tr -d '\n'", returnStdout: true
                            env.dpeClFoBuildDate=sh script: "echo \$(TZ='EST5EDT,M3.2.0,M11.1.0' date) | tr -d '\n'", returnStdout: true
                            env.DPE_DEPLOY_KEY = env.DEPLOYKEY
                        }
                        sh '''
                          exit 0
                        ''' 
                  }
                post {
                  failure{
                        script {
                          env.FAILURE_STAGE = 'Build Info'
                          //slackSend(color: '#FF0000', message: "FAILURE: `${env.JOB_NAME}` #${env.BUILD_NUMBER}:\n${env.BUILD_URL} failed stage ${env.FAILURE_STAGE} ")
                        }
                  }
                }  
            }

          stage('Deploy Some Client Foundation') {
              steps{
                withCredentials([string(credentialsId: 'DPEDeployKey', variable: 'DEPLOYKEY')]) {
                       sh "set -x"
                       sh "echo 'start deploy dpe-client-foundation'"
                       sh "cp docker/dpe-script-environment/.aws.credentials.enc ~/"
                       sh "dpeBuildTag=$ENV_BUILDNAME"
                       sh "echo '{"buildNumber": "$dpeBuildTag", "tag": "$dpeClFoTag", "buildDate": "$dpeClFoBuildDate" }'"
                       sh "{ 'buildNumber': '$dpeBuildTag', 'buildDate': '$dpeClFoBuildDate' } > some-client-text.json"
                       sh "echo 'deploy key: $DPE_DEPLOY_KEY'"
                       sh "bin/deploy-dpe.sh -p $DPE_DEPLOY_KEY -j"
                }  
              }
              post {
                failure {
                  script {
                    env.FAILURE_STAGE = 'Deploy some client'
                    //slackSend(color: '#FF0000', message: "FAILURE: `${env.JOB_NAME}` #${env.BUILD_NUMBER}:\n${env.BUILD_URL} failed stage ${env.FAILURE_STAGE} ")
                  }
                }
              }              
          }      
    }
      post {
       changed {
            script {
                if(currentBuild.result == 'SUCCESS') {
                    //slackSend(color: '#00FF00', message: "Changed from FAILURE to SUCCESS: `${env.JOB_NAME}` #${env.BUILD_NUMBER}:\n${env.BUILD_URL}")
                }
                if(currentBuild.result == 'FAILURE') {
                  //slackSend(color: '#FF0000', message: "SUCCESS to FAILURE: `${env.JOB_NAME}` #${env.BUILD_NUMBER}:\n${env.BUILD_URL}  ")
                }
            }
        }
       always {
         script {
            env.FAILURE_STAGE = 'Deploy some client'
            //slackSend(color: '#FFFF00', , message: "Completed: `${env.JOB_NAME}` #${env.BUILD_NUMBER}:\n${env.BUILD_URL}")
         }
       }
    }
}